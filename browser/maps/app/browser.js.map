{"version":3,"sources":["app/browser.js"],"names":["React","BrowserUpload","BrowserFolderTree","BrowserFolderContents","BrowserDetailsBar","Browser","createClass","displayName","getInitialState","selectedFolder","selectedItemId","selectedItem","requiresUpdate","Date","changeSelectedFolder","folderPath","this","setState","changeSelectedItem","item","state","id","onSelectedFolderChanged","folder","path","onSelectedItemChanged","onItemDeleted","requestContentsRefresh","onFileAdded","render","createElement","className","uploadFolder","onSelectedChanged"],"mappings":"AAAA,YAEA,IAAIA,OAAQA,MACRC,cAAgBA,cAChBC,kBAAoBA,kBACpBC,sBAAwBA,sBACxBC,kBAAoBA,kBAEpBC,QAAUL,MAAMM,aACnBC,YAAa,UACbC,gBAAiB,WAChB,OACCC,eAAgB,IAChBC,eAAgB,KAChBC,aAAc,KACdC,eAAgB,GAAIC,QAGtBC,qBAAsB,SAA8BC,GAEnDC,KAAKC,UACJR,eAAgBM,EAChBL,eAAgB,KAChBC,aAAc,QAGhBO,mBAAoB,SAA4BC,GAE3CH,KAAKI,MAAMT,eAAiBQ,GAC/BH,KAAKC,UACJP,eAAgBS,GAAQA,EAAKE,IAAM,KACnCV,aAAcQ,KAIjBG,wBAAyB,SAAiCC,GACzDP,KAAKF,qBAAqBS,EAAOC,OAElCC,sBAAuB,SAA+BN,GACrDH,KAAKE,mBAAmBC,IAEzBO,cAAe,WAEdV,KAAKW,yBAELX,KAAKE,mBAAmB,OAEzBU,YAAa,WACZZ,KAAKW,0BAENA,uBAAwB,WAEvBX,KAAKC,UAAWL,eAAgB,GAAIC,SAErCgB,OAAQ,WAEP,MAAO7B,OAAM8B,cACZ,OACEC,UAAW,gBACb/B,MAAM8B,cAAc7B,eAAiB2B,YAAaZ,KAAKY,YAAaI,aAAchB,KAAKI,MAAMX,iBAC7FT,MAAM8B,cACL,OACEC,UAAW,WACb/B,MAAM8B,cAAc5B,mBAAqBO,eAAgBO,KAAKI,MAAMX,eACnEwB,kBAAmBjB,KAAKM,0BACzBtB,MAAM8B,cAAc3B,uBAAyBM,eAAgBO,KAAKI,MAAMX,eACvEC,eAAgBM,KAAKI,MAAMV,eAC3Be,sBAAuBT,KAAKS,sBAC5BH,wBAAyBN,KAAKM,wBAC9BV,eAAgBI,KAAKI,MAAMR,kBAE7BZ,MAAM8B,cAAc1B,mBAAqBO,aAAcK,KAAKI,MAAMT,aAAce,cAAeV,KAAKU","file":"app/browser.js","sourcesContent":["\"use strict\";\n\nvar React = React;\nvar BrowserUpload = BrowserUpload;\nvar BrowserFolderTree = BrowserFolderTree;\nvar BrowserFolderContents = BrowserFolderContents;\nvar BrowserDetailsBar = BrowserDetailsBar;\n\nvar Browser = React.createClass({\n\tdisplayName: \"Browser\",\n\tgetInitialState: function getInitialState() {\n\t\treturn {\n\t\t\tselectedFolder: \"/\",\n\t\t\tselectedItemId: null,\n\t\t\tselectedItem: null,\n\t\t\trequiresUpdate: new Date()\n\t\t};\n\t},\n\tchangeSelectedFolder: function changeSelectedFolder(folderPath) {\n\n\t\tthis.setState({\n\t\t\tselectedFolder: folderPath,\n\t\t\tselectedItemId: null,\n\t\t\tselectedItem: null\n\t\t});\n\t},\n\tchangeSelectedItem: function changeSelectedItem(item) {\n\n\t\tif (this.state.selectedItem !== item) {\n\t\t\tthis.setState({\n\t\t\t\tselectedItemId: item && item.id || null,\n\t\t\t\tselectedItem: item\n\t\t\t});\n\t\t}\n\t},\n\tonSelectedFolderChanged: function onSelectedFolderChanged(folder) {\n\t\tthis.changeSelectedFolder(folder.path);\n\t},\n\tonSelectedItemChanged: function onSelectedItemChanged(item) {\n\t\tthis.changeSelectedItem(item);\n\t},\n\tonItemDeleted: function onItemDeleted() {\n\n\t\tthis.requestContentsRefresh();\n\t\t// The current selected item no longer exists so we can unset it (wont result in another UI update as contents refresh would make it identical)\n\t\tthis.changeSelectedItem(null);\n\t},\n\tonFileAdded: function onFileAdded() {\n\t\tthis.requestContentsRefresh();\n\t},\n\trequestContentsRefresh: function requestContentsRefresh() {\n\t\t// Request a reload of contents from the server by changing the date we last asked for an update\n\t\tthis.setState({ requiresUpdate: new Date() });\n\t},\n\trender: function render() {\n\n\t\treturn React.createElement(\n\t\t\t\"div\",\n\t\t\t{ className: \"file-browser\" },\n\t\t\tReact.createElement(BrowserUpload, { onFileAdded: this.onFileAdded, uploadFolder: this.state.selectedFolder }),\n\t\t\tReact.createElement(\n\t\t\t\t\"div\",\n\t\t\t\t{ className: \"browser\" },\n\t\t\t\tReact.createElement(BrowserFolderTree, { selectedFolder: this.state.selectedFolder,\n\t\t\t\t\tonSelectedChanged: this.onSelectedFolderChanged }),\n\t\t\t\tReact.createElement(BrowserFolderContents, { selectedFolder: this.state.selectedFolder,\n\t\t\t\t\tselectedItemId: this.state.selectedItemId,\n\t\t\t\t\tonSelectedItemChanged: this.onSelectedItemChanged,\n\t\t\t\t\tonSelectedFolderChanged: this.onSelectedFolderChanged,\n\t\t\t\t\trequiresUpdate: this.state.requiresUpdate })\n\t\t\t),\n\t\t\tReact.createElement(BrowserDetailsBar, { selectedItem: this.state.selectedItem, onItemDeleted: this.onItemDeleted })\n\t\t);\n\t}\n});"],"sourceRoot":"/source/"}