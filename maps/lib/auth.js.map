{"version":3,"sources":["lib/auth.js"],"names":["define","storage","url","analytics","config","authenticated","token","store","consts","user","extendUser","login","accessToken","profile","expires","loggedIn","Id","logout","redirectLogout","load","resolve","urls","redirectLogin","addParam","current","transferRedirect","decodeURIComponent","params","returnUrl","u","self","isInRole","role","roles","i","j","length","auth","access_token","expires_in","loginRedirect","logoutRedirect"],"mappings":"AAAA,YAEAA,SAAQ,sBAAuB,UAAW,gBAAiB,cAAe,SAAUC,EAASC,EAAKC,EAAWC,GAkC3G,QAASC,KACP,QAASC,IAMX,QAASA,KACP,MAAOL,GAAQM,MAAMC,EAAOF,OAM9B,QAASG,KACP,MAAOC,GAAWT,EAAQM,MAAMC,EAAOC,OAGzC,QAASE,GAAMC,EAAaC,EAASC,GAEnCX,EAAUY,SAASF,EAAQG,IAE3Bf,EAAQM,MAAMC,EAAOC,KAAMI,GAAWC,QAASA,IAC/Cb,EAAQM,MAAMC,EAAOF,MAAOM,GAAeE,QAASA,IAMtD,QAASG,KAEPhB,EAAQM,MAAMC,EAAOC,KAAM,MAC3BR,EAAQM,MAAMC,EAAOF,MAAO,MAM9B,QAASY,KAEPhB,EAAIiB,KAAKjB,EAAIkB,QAAQZ,EAAOa,KAAKJ,SAMnC,QAASK,KAGHjB,IACFH,EAAIiB,KAAKjB,EAAIkB,QAAQZ,EAAOa,KAAKV,QAEjCT,EAAIiB,KAAKjB,EAAIkB,QAAQlB,EAAIqB,SAASf,EAAOa,KAAKV,MAAO,YAAaT,EAAIsB,aAO1E,QAASC,KAEPvB,EAAIiB,KAAKO,mBAAmBxB,EAAIyB,SAASC,WAAa,MAMxD,QAASlB,GAAWmB,GAElB,GAAIC,GAAOD,KAeX,OAbAC,GAAKC,SAAW,SAAUC,GAIxB,IAAK,GAFDC,GAAQH,EAAKG,MAAQH,EAAKG,UAErBC,EAAI,EAAGC,EAAIF,EAAMG,OAAQF,EAAIC,EAAGD,IACvC,GAAID,EAAMC,KAAOF,EACf,OAAO,CAIX,QAAO,GAGFF,EAlHT,GAAItB,IACFF,MAAO,QACPG,KAAM,OACNY,KAAMjB,GAAUA,EAAOiC,MAAQjC,EAAOiC,KAAKhB,OACzCJ,OAAQ,UACRN,MAAO,UAKPP,IAAUA,EAAOiC,MAAQjC,EAAOiC,KAAKC,cACvChC,EAAMF,EAAOiC,KAAKC,aAAclC,EAAOiC,KAAKE,WAG9C,IAAIF,IACFhC,cAAeA,EACfM,MAAOA,EACPM,OAAQA,EACRX,MAAOA,EACPG,KAAMA,EACN+B,cAAelB,EACfmB,eAAgBvB,EAChBO,iBAAkBA,EAGpB,OAAOY","file":"../../lib/auth.js","sourcesContent":["'use strict';\n\ndefine(['vendor/lski-storage', 'lib/url', 'lib/analytics', 'app/config'], function (storage, url, analytics, config) {\n\n\t\t\"use strict\";\n\n\t\tvar consts = {\n\t\t\t\ttoken: 'token',\n\t\t\t\tuser: 'user',\n\t\t\t\turls: config && config.auth && config.auth.urls || {\n\t\t\t\t\t\tlogout: '#logout',\n\t\t\t\t\t\tlogin: '#login'\n\t\t\t\t}\n\t\t};\n\n\t\t// If a token response has already been set in the settings auto set\n\t\tif (config && config.auth && config.auth.access_token) {\n\t\t\t\ttoken(config.auth.access_token, config.auth.expires_in);\n\t\t}\n\n\t\tvar auth = {\n\t\t\t\tauthenticated: authenticated,\n\t\t\t\tlogin: login,\n\t\t\t\tlogout: logout,\n\t\t\t\ttoken: token,\n\t\t\t\tuser: user,\n\t\t\t\tloginRedirect: redirectLogin,\n\t\t\t\tlogoutRedirect: redirectLogout,\n\t\t\t\ttransferRedirect: transferRedirect\n\t\t};\n\n\t\treturn auth;\n\n\t\t/**\r\n   * States whether the user is currently logged in\r\n   */\n\t\tfunction authenticated() {\n\t\t\t\treturn !!token();\n\t\t}\n\n\t\t/**\r\n   * Gets the authorisation token\r\n   */\n\t\tfunction token() {\n\t\t\t\treturn storage.store(consts.token);\n\t\t}\n\n\t\t/**\r\n   * Gets the current user data\r\n   */\n\t\tfunction user() {\n\t\t\t\treturn extendUser(storage.store(consts.user));\n\t\t}\n\n\t\tfunction login(accessToken, profile, expires) {\n\n\t\t\t\tanalytics.loggedIn(profile.Id);\n\n\t\t\t\tstorage.store(consts.user, profile, { expires: expires });\n\t\t\t\tstorage.store(consts.token, accessToken, { expires: expires });\n\t\t}\n\n\t\t/**\r\n   * Remove the token and user from storage meaning they are no longer logged in\r\n   */\n\t\tfunction logout() {\n\n\t\t\t\tstorage.store(consts.user, null);\n\t\t\t\tstorage.store(consts.token, null);\n\t\t}\n\n\t\t/**\r\n  * Transfers the user to the log OUT page\r\n  */\n\t\tfunction redirectLogout() {\n\n\t\t\t\turl.load(url.resolve(consts.urls.logout));\n\t\t}\n\n\t\t/**\r\n  * Transfers the user to the log IN page\r\n  */\n\t\tfunction redirectLogin() {\n\n\t\t\t\t// If already logged in, then we are redirecting as the user doesnt have access to that\n\t\t\t\tif (authenticated()) {\n\t\t\t\t\t\turl.load(url.resolve(consts.urls.login));\n\t\t\t\t} else {\n\t\t\t\t\t\turl.load(url.resolve(url.addParam(consts.urls.login, 'returnUrl', url.current())));\n\t\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * When someone has logged in this successfully redirects the user using the returnUrl in the query string\r\n   */\n\t\tfunction transferRedirect() {\n\n\t\t\t\turl.load(decodeURIComponent(url.params().returnUrl || '#'));\n\t\t}\n\n\t\t/**\r\n   * Gives role based functions to the current user, regardless of whether the user is authenticated\r\n   */\n\t\tfunction extendUser(u) {\n\n\t\t\t\tvar self = u || {};\n\n\t\t\t\tself.isInRole = function (role) {\n\n\t\t\t\t\t\tvar roles = self.roles = self.roles || [];\n\n\t\t\t\t\t\tfor (var i = 0, j = roles.length; i < j; i++) {\n\t\t\t\t\t\t\t\tif (roles[i] === role) {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t};\n\n\t\t\t\treturn self;\n\t\t}\n});"]}