{"version":3,"sources":["lib/url.js"],"names":["define","root","config","_setRoot","path","consts","_parseRoot","url","result","test","substr","length","urls","api","Error","resolve","join","Array","prototype","call","arguments","resolveApi","reload","location","this","current","load","assign","pathname","search","hash","addParam","name","value","begin","pos","indexOf","substring","encodeURIComponent","params","results","plusReplaceRegEx","r","decodeFunc","s","decodeURIComponent","replace","queryString","window","urlParams","exec"],"mappings":"AAAA,YAEAA,SAAQ,OAAQ,cAAe,SAAUC,EAAMC,GA8F9C,QAASC,GAASC,GAEjBC,EAAOJ,KAAOK,EAAWF,GAG1B,QAASE,GAAWC,GAEnB,GAAIC,GAAS,IAMb,OAJID,KACHC,EAAS,MAAMC,KAAKF,GAAOA,EAAIG,OAAO,EAAGH,EAAII,OAAS,GAAKJ,GAGrDC,EAvGR,GAAmB,MAAfN,EAAOU,MAAoC,MAApBV,EAAOU,KAAKX,MAAmC,MAAnBC,EAAOU,KAAKC,IAClE,KAAM,IAAIC,OAAM,cAGjB,IAAIT,IACHJ,KAAMK,EAAWJ,EAAOU,KAAKX,MAC7BY,IAAKP,EAAWJ,EAAOU,KAAKC,KAG7B,QAKCE,QAAS,SAAiBR,GAEzB,GAAIS,GAAOC,MAAMC,UAAUF,IAE3B,OAAI,4BAA4BP,KAAKF,GAC7BS,EAAKG,KAAKC,UAAW,IAGtBf,EAAOJ,KAAOe,EAAKG,KAAKC,UAAW,KAE3CC,WAAY,WAEX,MAAOhB,GAAOQ,IAAMI,MAAMC,UAAUF,KAAKG,KAAKC,UAAW,KAK1DE,OAAQ,WACPrB,EAAKsB,SAASD,OAAOE,KAAKC,YAK3BC,KAAM,SAAcnB,GACnBN,EAAKsB,SAASI,OAAOpB,IAKtBN,KAAME,EAINsB,QAAS,WACR,MAAOxB,GAAKsB,SAASK,SAAW3B,EAAKsB,SAASM,OAAS5B,EAAKsB,SAASO,MAEtEC,SAAU,SAAkB3B,EAAM4B,EAAMC,GAEvC,GAEIC,GAFAC,EAAM/B,EAAKgC,QAAQ,KACnBN,EAAO,EAUX,OAPIK,SACHD,EAAQ9B,EAAKiC,UAAU,EAAGF,GAC1BL,EAAO1B,EAAKiC,UAAUF,IAEtBD,EAAQ9B,GAGD8B,EAAOA,EAAME,QAAQ,UAAc,IAAM,IAAKE,mBAAmBN,GAAO,IAAKM,mBAAmBL,GAAS,IAAKH,GAAMd,KAAK,KAMlIuB,OAAQ,WAaP,IAXA,GAAIC,GAEJC,EAAmB,MAEnBC,EAAI,qBACAC,EAAa,SAAoBC,GACpC,MAAOC,oBAAmBD,EAAEE,QAAQL,EAAkB,OAEnDM,EAAcC,OAAOzB,SAASM,OAAOQ,UAAU,GAC/CY,KAEGT,EAAUE,EAAEQ,KAAKH,IACvBE,EAAUN,EAAWH,EAAQ,KAAOG,EAAWH,EAAQ,GAGxD,OAAOS","file":"../../lib/url.js","sourcesContent":["'use strict';\n\ndefine(['root', 'app/config'], function (root, config) {\n\n\t\"use strict\";\n\n\tif (config.urls == null || config.urls.root == null || config.urls.api == null) {\n\t\tthrow new Error('urls config');\n\t}\n\n\tvar consts = {\n\t\troot: _parseRoot(config.urls.root),\n\t\tapi: _parseRoot(config.urls.api)\n\t};\n\n\treturn {\n\t\t/**\r\n   * Performs the same as Url.Content in Razor pages, by resolving the passed url to the app root. \r\n   * If more than one argument is passed, then they are also concatenated together with a forward slash\r\n   */\n\t\tresolve: function resolve(url) {\n\n\t\t\tvar join = Array.prototype.join;\n\n\t\t\tif (/http:\\/\\/|https:\\/\\/|\\/\\//.test(url)) {\n\t\t\t\treturn join.call(arguments, '');\n\t\t\t}\n\n\t\t\treturn consts.root + join.call(arguments, '');\n\t\t},\n\t\tresolveApi: function resolveApi() {\n\n\t\t\treturn consts.api + Array.prototype.join.call(arguments, '');\n\t\t},\n\t\t/**\r\n   * Reloads the current page\r\n   */\n\t\treload: function reload() {\n\t\t\troot.location.reload(this.current());\n\t\t},\n\t\t/**\r\n   * Loads a new page\r\n   */\n\t\tload: function load(url) {\n\t\t\troot.location.assign(url);\n\t\t},\n\t\t/**\r\n   * Sets the application root, useful if applied to a subfolder location\r\n   */\n\t\troot: _setRoot,\n\t\t/**\r\n   * Returns the current application path and hash\r\n   */\n\t\tcurrent: function current() {\n\t\t\treturn root.location.pathname + root.location.search + root.location.hash;\n\t\t},\n\t\taddParam: function addParam(path, name, value) {\n\n\t\t\tvar pos = path.indexOf('#'),\n\t\t\t    hash = '',\n\t\t\t    begin;\n\n\t\t\tif (pos !== -1) {\n\t\t\t\tbegin = path.substring(0, pos);\n\t\t\t\thash = path.substring(pos);\n\t\t\t} else {\n\t\t\t\tbegin = path;\n\t\t\t}\n\n\t\t\treturn [begin, begin.indexOf('?') === -1 ? '?' : '&', encodeURIComponent(name), '=', encodeURIComponent(value || ''), hash].join('');\n\t\t},\n\t\t/**\r\n   * Calculates and returns the parameters supplied to the webpage via the query string and populates an object with each of the property names\r\n   * corresponding to a key from querystring (adapted from code found on StackOverflow, ref not known)\r\n   */\n\t\tparams: function params() {\n\n\t\t\tvar results,\n\t\t\t    // The results, with name = results[1] and value = results[2]\n\t\t\tplusReplaceRegEx = /\\+/g,\n\t\t\t    // Regex for replacing addition symbol with a space\n\t\t\tr = /([^&=]+)=?([^&]*)/g,\n\t\t\t    decodeFunc = function decodeFunc(s) {\n\t\t\t\treturn decodeURIComponent(s.replace(plusReplaceRegEx, \" \"));\n\t\t\t},\n\t\t\t    queryString = window.location.search.substring(1),\n\t\t\t    urlParams = {};\n\n\t\t\twhile (results = r.exec(queryString)) {\n\t\t\t\turlParams[decodeFunc(results[1])] = decodeFunc(results[2]);\n\t\t\t}\n\n\t\t\treturn urlParams;\n\t\t}\n\t};\n\n\tfunction _setRoot(path) {\n\n\t\tconsts.root = _parseRoot(path);\n\t}\n\n\tfunction _parseRoot(url) {\n\n\t\tvar result = null;\n\n\t\tif (url) {\n\t\t\tresult = /\\/$/.test(url) ? url.substr(0, url.length - 1) : url;\n\t\t}\n\n\t\treturn result;\n\t}\n});"]}