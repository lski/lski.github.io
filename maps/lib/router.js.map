{"version":3,"sources":["lib/router.js"],"names":["define","ko","hasher","crossroads","config","analytics","Router","routes","components","log","parseHash","newHash","parse","self","this","hasLog","route","observable","registerRoutes","utils","arrayForEach","addRoute","url","params","p","extend","pageView","registerComponents","comp","register","name","args","normalizeFn","NORM_AS_OBJECT","initialized","add","changed","init","applyBindings","router"],"mappings":"AAAA,YAEAA,SAAQ,WAAY,SAAU,aAAc,aAAc,iBAAkB,SAAUC,EAAIC,EAAQC,EAAYC,EAAQC,GAclH,QAASC,GAAOC,EAAQC,EAAYC,GA4DhC,QAASC,GAAUC,GACfR,EAAWS,MAAMD,GA3DrB,GAAIE,GAAOC,KACPC,EAAwB,kBAARN,EAMpBI,GAAKG,MAAQf,EAAGgB,eAMhBJ,EAAKK,eAAiB,SAAUX,GAE5BN,EAAGkB,MAAMC,aAAab,EAAQ,SAAUS,GAEpCb,EAAWkB,SAASL,EAAMM,IAAK,SAAUC,GAGrC,GAAIC,GAAIvB,EAAGkB,MAAMM,OAAOF,EAAQP,EAAMO,OACtCV,GAAKG,MAAMQ,GAEXnB,EAAUqB,SAAS,IAAMV,EAAMM,KAE3BP,GACAN,EAAI,aAAcO,EAAMM,IAAKE,QAU7CX,EAAKc,mBAAqB,SAAUnB,GAEhCP,EAAGkB,MAAMC,aAAaZ,EAAY,SAAUoB,GACxC3B,EAAGO,WAAWqB,SAASD,EAAKE,KAAMF,EAAKG,SAI/ClB,EAAKK,eAAeX,GACpBM,EAAKc,mBAAmBnB,GAGxBL,EAAW6B,YAAc7B,EAAW8B,eACpC/B,EAAOgC,YAAYC,IAAIzB,GACvBR,EAAOkC,QAAQD,IAAIzB,GACnBR,EAAOmC,OAGPpC,EAAGqC,eAAgBtB,MAAOH,EAAKG,QAjEnC,MAAO,IAAIV,GAAOF,EAAOmC,OAAOhC,OAAQH,EAAOmC,OAAO/B,WAAYJ,EAAOK","file":"../../lib/router.js","sourcesContent":["'use strict';\n\ndefine(['knockout', 'hasher', 'crossroads', 'app/config', 'lib/analytics'], function (ko, hasher, crossroads, config, analytics) {\n\n    \"use strict\";\n\n    return new Router(config.router.routes, config.router.components, config.log);\n\n    /**\r\n     * Sets up a new router\r\n     * \r\n     * @constructor\r\n     * @param {Array} routes A list of route objects (see registerRoutes)\r\n     * @param {Array} components A list of component objects (see registerComponents)\r\n     * @param {function=} logs Logs routes run with their params, optional\r\n     */\n    function Router(routes, components, log) {\n\n        var self = this,\n            hasLog = typeof log === 'function';\n\n        // The current route is an object that is bound to the global page and controls the main secion of the page, as its updated\n        // the page content changes if the route is found\n        // It includes storing all the information about the current page which iss a combination params passed from the url and the \n        // params passed to the registerRoutes function\n        self.route = ko.observable({});\n\n        /**\r\n         * Takes a list of route objects in the format { url: '', params: { page: '' } } and add them to the so that it can catch the routes (urls) and pass the params to the route.\r\n         * Those params are a combination of the params from the url and the params given for each route object\r\n         */\n        self.registerRoutes = function (routes) {\n\n            ko.utils.arrayForEach(routes, function (route) {\n\n                crossroads.addRoute(route.url, function (params) {\n\n                    // Combine both the route parameters, with the predefined ones\n                    var p = ko.utils.extend(params, route.params);\n                    self.route(p);\n\n                    analytics.pageView('#' + route.url);\n\n                    if (hasLog) {\n                        log('Route run:', route.url, p);\n                    }\n                });\n            });\n        };\n\n        /**\r\n         * Registers a list of components in the format { name: '', args: {} } where args is the same format as the second parameter of the ko.components.register\r\n         * This is for all components so that they can be referenced by names including 'page components' referenced in the params: { page: '' } property\r\n         */\n        self.registerComponents = function (components) {\n\n            ko.utils.arrayForEach(components, function (comp) {\n                ko.components.register(comp.name, comp.args);\n            });\n        };\n\n        self.registerRoutes(routes);\n        self.registerComponents(components);\n\n        // Actually setup the routing manager\n        crossroads.normalizeFn = crossroads.NORM_AS_OBJECT;\n        hasher.initialized.add(parseHash);\n        hasher.changed.add(parseHash);\n        hasher.init();\n\n        // Apply the first binding\n        ko.applyBindings({ route: self.route });\n\n        /**\r\n        * Is run when hasher detects a change in the browser url\r\n        */\n        function parseHash(newHash) {\n            crossroads.parse(newHash);\n        }\n    }\n});"]}