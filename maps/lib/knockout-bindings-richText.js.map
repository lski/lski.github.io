{"version":3,"sources":["lib/knockout-bindings-richText.js"],"names":["define","ko","cke"],"mappings":"AAAA,YAEAA,SAAQ,YAAa,SAAUC,EAAIC","file":"../../lib/knockout-bindings-richText.js","sourcesContent":["'use strict';\n\ndefine(['knockout'], function (ko, cke) {\n\n\t\"use strict\";\n\n\treturn;\n\n\t// This needs to be turned off prior to adding 'contenteditable'\n\tcke.disableAutoInline = true;\n\n\tcke.getInstanceFromElement = function (element) {\n\n\t\tfor (var i in this.instances) {\n\n\t\t\tvar instance = this.instances[i];\n\n\t\t\tif (instance.element.$ === element) {\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t};\n\n\tko.bindingHandlers.richText = {\n\n\t\tinit: function init(element, valueAccessor, allBindingsAccessor) {\n\n\t\t\tvar val = valueAccessor();\n\n\t\t\t// If not observable, there is no point in making this editable!\n\t\t\tif (!ko.isObservable(val)) {\n\t\t\t\tthrow new Error('ko.bindingHandlers.richText: The richText binding requires an observable value');\n\t\t\t}\n\n\t\t\tvar options = allBindingsAccessor().richTextOptions || {},\n\t\t\t    editor = cke.inline(element, options);\n\n\t\t\teditor.on('blur', function () {\n\n\t\t\t\tif (editor.checkDirty()) {\n\t\t\t\t\tvalueAccessor()(editor.getData());\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//handle disposal (if KO removes by the template binding)  then remove the editor\n\t\t\tko.utils.domNodeDisposal.addDisposeCallback(element, function () {\n\t\t\t\teditor.destroy();\n\t\t\t});\n\t\t},\n\t\tupdate: function update(element, valueAccessor) {\n\n\t\t\tvar editor = cke.getInstanceFromElement(element);\n\n\t\t\teditor.setData(ko.unwrap(valueAccessor()));\n\t\t}\n\t};\n});"]}