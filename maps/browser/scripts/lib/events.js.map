{"version":3,"sources":["browser/scripts/lib/events.js"],"names":["factory","define","window","lski","events","on","element","arguments","eventName","length","query","el","addEventListener","selector","cb","event","target","srcElement","match","_bubbleCheck","call","once","handler","wrapper","apply","this","off","removeEventListener","trigger","evt","_createEvent","dispatchEvent","elements","document","querySelectorAll","i","n","Event","prototype","constructor","name","createEvent","initEvent","createEventObject","_selectorMatches","p","Element","f","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","s","potentialMatches","ownerDocument","item","rootElement","targetElement","parentElement"],"mappings":"CAAA,SAAUA,GAEN,YAEsB,mBAAXC,SAAyBA,OAAY,IAC5CA,UAAWD,IAGXE,OAAOC,KAAQD,OAAOC,SACtBD,OAAOC,KAAKC,OAASJ,MAG1B,WAwBC,QAASK,KAEL,GAAIC,GAAUC,UAAU,GACpBC,EAAYD,UAAU,EAG1B,IAAyB,IAArBA,UAAUE,OAEV,MAAOC,GAAMJ,EAAS,SAASK,GAE3BA,EAAGC,iBAAiBJ,EAAWD,UAAU,IAAI,IAIhD,IAAyB,IAArBA,UAAUE,OAAc,CAE7B,GAAII,GAAWN,UAAU,GACrBO,EAAKP,UAAU,EAEnB,OAAOG,GAAMJ,EAAS,SAASK,GAE3BA,EAAGC,iBAAiBJ,EAAW,SAASO,GAEpC,GAAIC,GAASD,EAAMC,QAAUD,EAAME,WAC/BC,EAAQC,EAAaR,EAAIK,EAAQH,EAEhCK,IAILJ,EAAGM,KAAKF,EAAOH,QAa/B,QAASM,GAAKf,EAASS,EAAOO,GAE1B,MAAOZ,GAAMJ,EAAS,SAASK,GAE3BP,EAAOC,GAAGM,EAAII,EAAO,QAASQ,KAC1BD,EAAQE,MAAMC,KAAMlB,WACpBH,EAAOsB,IAAIf,EAAII,EAAOQ,OAYlC,QAASG,GAAIpB,EAASS,EAAOO,GAEzBZ,EAAMJ,EAAS,SAASK,GAEpBA,EAAGgB,oBAAoBZ,EAAOO,GAAS,KAU/C,QAASM,GAAQtB,EAASS,GAEtB,GAAIc,GAAwB,gBAAVd,GAAqBe,EAAaf,GAASA,CAE7D,OAAOL,GAAMJ,EAAS,SAASK,GAC3BA,EAAGoB,cAAcF,KAUzB,QAASnB,GAAMJ,EAASQ,GAEpB,GAAIkB,GAA+B,gBAAZ1B,GACjB2B,SAASC,iBAAiB5B,GACzBA,EAAc,OACXA,GACCA,EAEX,IAAkB,kBAAPQ,GACP,IAAK,GAAIqB,GAAI,EAAGC,EAAIJ,EAASvB,OAAY2B,EAAJD,EAAOA,IACxCrB,EAAGkB,EAASG,GAAIA,EAIxB,OAAOH,GAUX,QAASF,KAEL,GAAIO,MAAMC,UAAUC,YAChB,MAAO,IAAIF,OAAMG,KAGrB,IAAIP,SAASQ,YAAa,CAEZR,SAASQ,YAAY,QAE/B,OADA1B,OAAM2B,UAAUF,MAAM,GAAM,GACrBzB,MAGDkB,SAASU,mBAEnB,OADA5B,OAAMP,UAAYgC,KACXzB,MAMX,QAAS6B,GAAiBjC,EAAIE,GAC1B,GAAIgC,GAAIC,QAAQR,UACZS,EAAIF,EAAEG,SAAWH,EAAEI,uBAAyBJ,EAAEK,oBAAsBL,EAAEM,mBAAqB,SAASxC,EAAIyC,GAGxG,IAFA,GAAIC,IAAoB1C,EAAGsB,UAAYtB,EAAG2C,eAAepB,iBAAiBkB,GACtEjB,EAAIkB,EAAiB5C,SAChB0B,GAAK,GAAKkB,EAAiBE,KAAKpB,KAAOxB,IAChD,MAAQwB,GAAI,GAAMkB,EAAiBE,KAAKpB,GAAK,KAEjD,OAAOY,GAAE3B,KAAKT,EAAIE,GAMtB,QAASM,GAAaqC,EAAaC,EAAe5C,GAG9C,GAAI2C,GAAeC,EACf,MAAO,KAGX,IAAIvC,GAAQ0B,EAAiBa,EAAe5C,EAG5C,OAAOK,GAAQuC,EAAiBA,EAA2B,cAAItC,EAAaqC,EAAaC,EAAcC,cAAe7C,GAAY,KArLtI,GAAIT,IACAM,MAAOA,EACPL,GAAIA,EACJgB,KAAMA,EACNK,IAAKA,EACLE,QAASA,EAGb,OAAOxB","file":"browser/scripts/lib/events.js","sourcesContent":["(function(factory) {\r\n\r\n    \"use strict\";\r\n\r\n    if (typeof define === 'function' && define['amd']) {\r\n        define([], factory);\r\n    }\r\n    else {\r\n        window.lski = (window.lski || {});\r\n        window.lski.events = factory();\r\n    }\r\n\r\n})(function() {\r\n\r\n    var events = {\r\n        query: query,\r\n        on: on,\r\n        once: once,\r\n        off: off,\r\n        trigger: trigger\r\n    };\r\n\r\n    return events;\r\n\r\n    /**\r\n     * Attaches an event listener to the passed in element. It can be run either directly by attaching a listener to an element, very similar to addEventlistener or it can be given an extra selector where it can be placed in a parent element and used to listen to events fired from children matching that selector.\r\n     * \r\n     * element, eventName, handler\r\n     * or\r\n     * element, eventName, filter, handler\r\n     * \r\n     * @param {mixed} element Uses [query]{@link query} internally to find the elements to work on, therefore a string selector, an element or an array of elements to attach a listener too.\r\n     * @param {string} eventName The name of the event to fire e.g. 'click'.\r\n     * @param {string} [selector] If supplied will watch for events fired by the children of the 'elements' the listener is attached too, it will filter out which elements to fire the callback handler against using this selector.\r\n     * @param {function} handler The call back function to run when the event has occurred, 'this' = the element fired against (either the element it is attached to or if a selector is used the child element of the element that matches the selector) \r\n     */\r\n    function on() {\r\n\r\n        var element = arguments[0],\r\n            eventName = arguments[1];\r\n\r\n        //element, eventName, handler\r\n        if (arguments.length === 3) {\r\n\r\n            return query(element, function(el) {\r\n                \r\n                el.addEventListener(eventName, arguments[2], false);\r\n            });\r\n        }\r\n        //element, eventName, selector, handler\r\n        else if (arguments.length === 4) {\r\n\r\n            var selector = arguments[2],\r\n                cb = arguments[3];\r\n                \r\n            return query(element, function(el) {\r\n                \r\n                el.addEventListener(eventName, function(event) {\r\n\r\n                    var target = event.target || event.srcElement,\r\n                        match = _bubbleCheck(el, target, selector);\r\n\r\n                    if (!match) {\r\n                        return;\r\n                    }\r\n\r\n                    cb.call(match, event);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs a listener a max of one time only. It then removes itself.\r\n     *\r\n     * @param {mixed} element Uses [query]{@link query} internally to find the elements to work on, therefore a string selector, an element or an array of elements to attach a listener too.\r\n     * @param {string} eventName The name of the event to fire e.g. 'click'.\r\n     * @param {function} handler The call back function to run when the event has occurred, 'this' = the element fired against\r\n     */\r\n    function once(element, event, handler) {\r\n\r\n        return query(element, function(el) {\r\n\r\n            events.on(el, event, function wrapper() {\r\n                handler.apply(this, arguments);\r\n                events.off(el, event, wrapper);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove a handler from the element, that matches the function and the event name\r\n     * \r\n     * @param {mixed} element Uses [query]{@link query} internally to find the elements to work on, therefore a string selector, an element or an array of elements to attach a listener too.\r\n     * @param {string} eventName The name of the event to fire e.g. 'click'.\r\n     * @param {function} handler The call back function to run when the event has occurred, 'this' = the element fired against\r\n     */\r\n    function off(element, event, handler) {\r\n\r\n        query(element, function(el) {\r\n\r\n            el.removeEventListener(event, handler, false);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fire an event attached to an element\r\n     * \r\n     * @param {mixed} element Uses [query]{@link query} internally to find the elements to work on, therefore a string selector, an element or an array of elements to attach a listener too.\r\n     * @param {string} eventName The name of the event to fire e.g. 'click'.\r\n     */\r\n    function trigger(element, event) {\r\n\r\n        var evt = (typeof event === 'string' ? _createEvent(event) : event);\r\n\r\n        return query(element, function(el) {\r\n            el.dispatchEvent(evt);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {mixed} element Can be a string selector, that gets run through document.querySelectorAll, a single element returned wrapped in an array or an existing array of elements\r\n     * @param {function} [cb] if supplied will run through the list of elements an call the call function with the element and the index in the list. If not supplied no loop is performed.\r\n     * @returns {Array} returns an 'array like' object (NodeList if a string it supplied otherwise an array)\r\n     */\r\n    function query(element, cb) {\r\n\r\n        var elements = (typeof element === 'string')\r\n            ? document.querySelectorAll(element)\r\n            : (element.length)\r\n                ? element\r\n                : [element];\r\n                \r\n        if (typeof cb === 'function') {\r\n            for (var i = 0, n = elements.length; i < n; i++) {\r\n                cb(elements[i], i);\r\n            }\r\n        }\r\n\r\n        return elements;\r\n    }\r\n    \r\n     /**\r\n     * Private methods\r\n     */\r\n    \r\n    /**\r\n     * Cross browser function for creating an event object to be dispatched\r\n     */\r\n    function _createEvent() {\r\n\r\n        if (Event.prototype.constructor) {\r\n            return new Event(name);\r\n        }\r\n\r\n        if (document.createEvent) {\r\n\r\n            var evt = document.createEvent('Event');\r\n            event.initEvent(name, true, true);\r\n            return event;\r\n        }\r\n\r\n        var evt = document.createEventObject();\r\n        event.eventName = name;\r\n        return event;\r\n    }\r\n\r\n    /**\r\n     * Polyfill for Element.matches\r\n     */\r\n    function _selectorMatches(el, selector) {\r\n        var p = Element.prototype;\r\n        var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function(el, s) {\r\n            var potentialMatches = (el.document || el.ownerDocument).querySelectorAll(s),\r\n                i = potentialMatches.length;\r\n            while (--i >= 0 && potentialMatches.item(i) !== el);\r\n            return (i > -1) ? potentialMatches.item(i) : null;\r\n        };\r\n        return f.call(el, selector);\r\n    }\r\n\r\n    /**\r\n     * Bubbles up through the element chain checking parent elements to see if they are a match to the selector. Stops \r\n     */\r\n    function _bubbleCheck(rootElement, targetElement, selector) {\r\n\r\n        // Gone too far as we have reached the wrapping element\r\n        if (rootElement == targetElement) {\r\n            return null;\r\n        }\r\n\r\n        var match = _selectorMatches(targetElement, selector);\r\n\r\n        // if found then return this element, otherwise check the parent of this element, if there is one and if not return null.\r\n        return match ? targetElement : (targetElement.parentElement) ? _bubbleCheck(rootElement, targetElement.parentElement, selector) : null;\r\n    }\r\n\r\n});"],"sourceRoot":"/source/"}